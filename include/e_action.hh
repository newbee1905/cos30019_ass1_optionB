#ifndef ENUM_ACTION_HH
#define ENUM_ACTION_HH

#include "enums.hh"
#include "grid.hh"

ENUM_STR(Action, LEFT, RIGHT, UP, DOWN, NO_OP);

namespace kd {
// Right and Down directions are bias
// Since we most likely start from the left side
// and the goals are most likely on the right side
//
// This bias is non-logical but what the test cases
// most likely are if generated by human
constexpr std::array<kd::Cell, 5> CellFromDirection = {
		kd::Cell{ 0, -1},
    kd::Cell{ 0,  1},
    kd::Cell{-1,  0},
    kd::Cell{ 1,  0},
    kd::Cell{ 0,  0},
};

// DFS use stack
// so reverse the order of directions we need to push
// into the stack
constexpr std::array<kd::pair<kd::Cell, Action>, 4> DfsCellAdjs = {
		kd::pair<kd::Cell, Action>{ kd::Cell{0, 1}, Action::RIGHT},
		kd::pair<kd::Cell, Action>{ kd::Cell{1, 0},  Action::DOWN},
		kd::pair<kd::Cell, Action>{kd::Cell{0, -1},  Action::LEFT},
		kd::pair<kd::Cell, Action>{kd::Cell{-1, 0},    Action::UP},
};

constexpr std::array<kd::pair<kd::Cell, Action>, 4> CellAdjs = {
		kd::pair<kd::Cell, Action>{kd::Cell{-1, 0},    Action::UP},
		kd::pair<kd::Cell, Action>{kd::Cell{0, -1},  Action::LEFT},
		kd::pair<kd::Cell, Action>{ kd::Cell{1, 0},  Action::DOWN},
		kd::pair<kd::Cell, Action>{ kd::Cell{0, 1}, Action::RIGHT},
};

}; // namespace kd

#endif // !ENUM_ACTION_HH
